name: 一時的な権限付与

on:
  issues:
    types: [labeled]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  approve-and-grant-permissions:
    runs-on: ubuntu-latest
    # 'Approved'ラベルが付けられた場合または手動実行の場合に実行
    if: github.event.label.name == 'Approved' || github.event_name == 'workflow_dispatch'
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ADMIN_TOKEN }}
          fetch-depth: 0

      - name: ラベル付与者の権限を確認
        id: check-permission
        if: github.event_name == 'issues'
        run: |
          # ラベルを付けたユーザー
          LABELER="${{ github.event.sender.login }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          
          # CODEOWNERSファイルからチームを抽出
          if [ -f ".github/CODEOWNERS" ]; then
            # CODEOWNERSファイルからチーム名を抽出（@org/team-name の形式）
            TEAMS=$(grep -o '@[^ ]*' .github/CODEOWNERS | sort | uniq | tr '\n' ' ')
            echo "CODEOWNERSから抽出したチーム: $TEAMS"
            
            # ユーザーがいずれかのチームに所属しているか確認
            HAS_PERMISSION=false
            for TEAM in $TEAMS; do
              # チーム名から組織名とチームスラグを抽出
              if [[ $TEAM =~ @([^/]+)/(.+) ]]; then
                ORG_NAME="${BASH_REMATCH[1]}"
                TEAM_SLUG="${BASH_REMATCH[2]}"
                
                echo "チームを確認中: $ORG_NAME/$TEAM_SLUG"
                
                # チームメンバーシップを確認（エラーを無視）
                MEMBERSHIP=$(gh api "orgs/$ORG_NAME/teams/$TEAM_SLUG/memberships/$LABELER" 2>/dev/null || echo "not_found")
                
                if [ "$MEMBERSHIP" != "not_found" ]; then
                  HAS_PERMISSION=true
                  echo "ユーザー $LABELER は $ORG_NAME/$TEAM_SLUG のメンバーです"
                  break
                fi
              fi
            done
            
            if [ "$HAS_PERMISSION" = "true" ]; then
              echo "has_permission=true" >> $GITHUB_OUTPUT
              echo "承認権限を持つユーザーです: $LABELER"
            else
              echo "has_permission=false" >> $GITHUB_OUTPUT
              echo "承認権限を持たないユーザーです: $LABELER"
              
              # ラベルを削除（GitHub APIを使用）
              gh api --method DELETE "/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/PR%20Approved"
              
              # エラーメッセージをコメント
              gh issue comment "$ISSUE_NUMBER" --body "⚠️ 承認権限がありません。このラベルは特定のユーザーのみが付与できます。"
              exit 1
            fi
          else
            echo "CODEOWNERSファイルが見つかりません。デフォルトの承認者リストを使用します。"
            
            # デフォルトの承認者リスト
            APPROVERS="dmc-nyoshida"
            
            if echo "$APPROVERS" | grep -q "$LABELER"; then
              echo "has_permission=true" >> $GITHUB_OUTPUT
              echo "承認権限を持つユーザーです: $LABELER"
            else
              echo "has_permission=false" >> $GITHUB_OUTPUT
              echo "承認権限を持たないユーザーです: $LABELER"
              
              # ラベルを削除（GitHub APIを使用）
              gh api --method DELETE "/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/PR%20Approved"
              
              # エラーメッセージをコメント
              gh issue comment "$ISSUE_NUMBER" --body "⚠️ 承認権限がありません。このラベルは特定のユーザーのみが付与できます。"
              exit 1
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          
      - name: 関連PRを検索
        id: find-pr
        if: github.event_name == 'issues' && (steps.check-permission.outputs.has_permission == 'true' || steps.check-permission.outcome == 'skipped')
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          
          # PRの本文に「Issue #XX」という形式で関連Issueが記載されているPRを検索
          PR_INFO=$(gh pr list --search "Issue #$ISSUE_NUMBER in:body" --json number,url,title --jq '.[0]')
          
          if [ -n "$PR_INFO" ]; then
            PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
            PR_URL=$(echo "$PR_INFO" | jq -r '.url')
            
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
            echo "関連PRを発見: #$PR_NUMBER ($PR_URL)"
          else
            echo "関連PRが見つかりません"
            gh issue comment "$ISSUE_NUMBER" --body "❌ このIssueに関連するPRが見つかりませんでした。本IssueをCloseして再度Issueを作成してください。"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          
      - name: PRをマージ
        if: github.event_name == 'issues' && steps.find-pr.outputs.pr_number != ''
        run: |
          PR_NUMBER="${{ steps.find-pr.outputs.pr_number }}"
          
          # PRをマージ（管理者権限を使用）
          gh pr merge $PR_NUMBER --merge --delete-branch --admin
          
          # マージ後にmainブランチをチェックアウト
          git fetch origin main
          git checkout main
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}

      - name: Pythonをセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 必要なパッケージをインストール
        run: |
          python -m pip install --upgrade pip
          pip install pandas PyGithub python-dateutil

      - name: 権限を付与
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        id: add-permissions
        run: |
          python .github/scripts/add_permissions.py | tee output_log.txt
          
      - name: 結果を保存
        run: |
          grep "^成功\|^エラー" output_log.txt > output_summary.txt || true
          
      - name: 結果をアーティファクトとして保存
        uses: actions/upload-artifact@v4
        with:
          name: execution-results
          path: |
            output_log.txt
            output_summary.txt
          retention-days: 90
          
      - name: 台帳をリポジトリにコミット
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # mainブランチの最新の変更を取得
          git fetch origin main
          git checkout main
          git pull origin main  # 最新の変更を取得
          
          # 台帳ファイルを更新
          cp permissions_ledger.csv permissions_ledger.csv.new
          git checkout main -- permissions_ledger.csv || true
          
          # ヘッダー行を作成
          echo "team_name,username,end_date,status" > permissions_ledger.csv.header
          
          if [ -f permissions_ledger.csv ]; then
            # 既存の台帳からヘッダーを除外してデータ行のみを取得
            grep -v "^team_name,username,end_date,status" permissions_ledger.csv > permissions_ledger.csv.data || true
            # 新しい台帳からヘッダーを除外してデータ行のみを取得
            grep -v "^team_name,username,end_date,status" permissions_ledger.csv.new > permissions_ledger.csv.new.data || true
            
            # データ行をマージしてソート
            cat permissions_ledger.csv.data permissions_ledger.csv.new.data | sort | uniq > permissions_ledger.csv.merged
            
            # ヘッダー行とデータ行を結合
            cat permissions_ledger.csv.header permissions_ledger.csv.merged > permissions_ledger.csv
          else
            # 既存の台帳がない場合は、ヘッダー行と新しい台帳のデータ行を結合
            grep -v "^team_name,username,end_date,status" permissions_ledger.csv.new > permissions_ledger.csv.new.data || true
            cat permissions_ledger.csv.header permissions_ledger.csv.new.data > permissions_ledger.csv
          fi
          
          # 一時ファイルを削除
          rm -f permissions_ledger.csv.header permissions_ledger.csv.data permissions_ledger.csv.new.data permissions_ledger.csv.merged permissions_ledger.csv.new
          
          # 変更をコミット
          git add permissions_ledger.csv
          git commit -m "台帳を更新 [skip ci]" || echo "変更なし"
          git push origin main
          
      - name: Issueに通知
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          
          # 申請者のユーザー名を取得
          ISSUE_INFO=$(gh issue view $ISSUE_NUMBER --json author)
          REQUESTER=$(echo "$ISSUE_INFO" | jq -r '.author.login')
          REQUESTER_MENTION="@$REQUESTER"
          
          # 結果の要約を取得
          if [ -f "output_summary.txt" ]; then
            RESULT=$(cat output_summary.txt)
          else
            RESULT="結果の詳細が見つかりません"
          fi
          
          # Issueにコメント
          SUCCESS_MSG="$REQUESTER_MENTION
          
          ## 権限付与が完了しました ✅
          
          ### 処理結果:
          \`\`\`
          $RESULT
          \`\`\`
          
          権限が正常に付与されました。"
          
          gh issue comment "$ISSUE_NUMBER" --body "$SUCCESS_MSG"
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}